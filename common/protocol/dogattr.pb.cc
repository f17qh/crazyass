// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dogattr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dogattr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dogrun2 {

namespace {

const ::google::protobuf::Descriptor* DogLevelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DogLevelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DogLevelConfigArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DogLevelConfigArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* FoodConfigArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FoodConfigArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrainConfigArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrainConfigArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayConfigArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayConfigArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* DogAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DogAttr_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dogattr_2eproto() {
  protobuf_AddDesc_dogattr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dogattr.proto");
  GOOGLE_CHECK(file != NULL);
  DogLevelConfig_descriptor_ = file->message_type(0);
  static const int DogLevelConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfig, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfig, exp_),
  };
  DogLevelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DogLevelConfig_descriptor_,
      DogLevelConfig::default_instance_,
      DogLevelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DogLevelConfig));
  DogLevelConfigArray_descriptor_ = file->message_type(1);
  static const int DogLevelConfigArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfigArray, cfg_),
  };
  DogLevelConfigArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DogLevelConfigArray_descriptor_,
      DogLevelConfigArray::default_instance_,
      DogLevelConfigArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfigArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogLevelConfigArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DogLevelConfigArray));
  FoodConfig_descriptor_ = file->message_type(2);
  static const int FoodConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, consume_heart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, consume_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, intimacy_),
  };
  FoodConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodConfig_descriptor_,
      FoodConfig::default_instance_,
      FoodConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodConfig));
  FoodConfigArray_descriptor_ = file->message_type(3);
  static const int FoodConfigArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfigArray, cfg_),
  };
  FoodConfigArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FoodConfigArray_descriptor_,
      FoodConfigArray::default_instance_,
      FoodConfigArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfigArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FoodConfigArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FoodConfigArray));
  TrainConfig_descriptor_ = file->message_type(4);
  static const int TrainConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, consume_heart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, consume_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, intimacy_),
  };
  TrainConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainConfig_descriptor_,
      TrainConfig::default_instance_,
      TrainConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainConfig));
  TrainConfigArray_descriptor_ = file->message_type(5);
  static const int TrainConfigArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfigArray, cfg_),
  };
  TrainConfigArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrainConfigArray_descriptor_,
      TrainConfigArray::default_instance_,
      TrainConfigArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfigArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrainConfigArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrainConfigArray));
  PlayConfig_descriptor_ = file->message_type(6);
  static const int PlayConfig_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, consume_heart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, consume_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, intimacy_),
  };
  PlayConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayConfig_descriptor_,
      PlayConfig::default_instance_,
      PlayConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayConfig));
  PlayConfigArray_descriptor_ = file->message_type(7);
  static const int PlayConfigArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfigArray, cfg_),
  };
  PlayConfigArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayConfigArray_descriptor_,
      PlayConfigArray::default_instance_,
      PlayConfigArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfigArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayConfigArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayConfigArray));
  DogAttr_descriptor_ = file->message_type(8);
  static const int DogAttr_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, intimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, id_),
  };
  DogAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DogAttr_descriptor_,
      DogAttr::default_instance_,
      DogAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DogAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DogAttr));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dogattr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DogLevelConfig_descriptor_, &DogLevelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DogLevelConfigArray_descriptor_, &DogLevelConfigArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodConfig_descriptor_, &FoodConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FoodConfigArray_descriptor_, &FoodConfigArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainConfig_descriptor_, &TrainConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrainConfigArray_descriptor_, &TrainConfigArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayConfig_descriptor_, &PlayConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayConfigArray_descriptor_, &PlayConfigArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DogAttr_descriptor_, &DogAttr::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dogattr_2eproto() {
  delete DogLevelConfig::default_instance_;
  delete DogLevelConfig_reflection_;
  delete DogLevelConfigArray::default_instance_;
  delete DogLevelConfigArray_reflection_;
  delete FoodConfig::default_instance_;
  delete FoodConfig_reflection_;
  delete FoodConfigArray::default_instance_;
  delete FoodConfigArray_reflection_;
  delete TrainConfig::default_instance_;
  delete TrainConfig_reflection_;
  delete TrainConfigArray::default_instance_;
  delete TrainConfigArray_reflection_;
  delete PlayConfig::default_instance_;
  delete PlayConfig_reflection_;
  delete PlayConfigArray::default_instance_;
  delete PlayConfigArray_reflection_;
  delete DogAttr::default_instance_;
  delete DogAttr_reflection_;
}

void protobuf_AddDesc_dogattr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdogattr.proto\022\007dogrun2\")\n\016DogLevelConf"
    "ig\022\n\n\002lv\030\001 \002(\005\022\013\n\003exp\030\002 \002(\005\";\n\023DogLevelC"
    "onfigArray\022$\n\003cfg\030\001 \003(\0132\027.dogrun2.DogLev"
    "elConfig\"\221\001\n\nFoodConfig\022\014\n\004type\030\001 \002(\005\022\n\n"
    "\002cd\030\002 \002(\005\022\025\n\rconsume_heart\030\003 \002(\005\022\024\n\014cons"
    "ume_gold\030\004 \002(\005\022\016\n\006strong\030\005 \001(\005\022\r\n\005speed\030"
    "\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\020\n\010intimacy\030\010 \001(\005\"3\n\017"
    "FoodConfigArray\022 \n\003cfg\030\001 \003(\0132\023.dogrun2.F"
    "oodConfig\"\222\001\n\013TrainConfig\022\014\n\004type\030\001 \002(\005\022"
    "\n\n\002cd\030\002 \002(\005\022\025\n\rconsume_heart\030\003 \002(\005\022\024\n\014co"
    "nsume_gold\030\004 \002(\005\022\016\n\006strong\030\005 \001(\005\022\r\n\005spee"
    "d\030\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\020\n\010intimacy\030\010 \001(\005\"5"
    "\n\020TrainConfigArray\022!\n\003cfg\030\001 \003(\0132\024.dogrun"
    "2.TrainConfig\"\221\001\n\nPlayConfig\022\014\n\004type\030\001 \002"
    "(\005\022\n\n\002cd\030\002 \002(\005\022\025\n\rconsume_heart\030\003 \002(\005\022\024\n"
    "\014consume_gold\030\004 \002(\005\022\016\n\006strong\030\005 \001(\005\022\r\n\005s"
    "peed\030\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\020\n\010intimacy\030\010 \001("
    "\005\"3\n\017PlayConfigArray\022 \n\003cfg\030\001 \003(\0132\023.dogr"
    "un2.PlayConfig\"~\n\007DogAttr\022\014\n\004name\030\001 \002(\t\022"
    "\r\n\002lv\030\002 \002(\005:\0011\022\013\n\003exp\030\003 \002(\005\022\014\n\004star\030\004 \002("
    "\005\022\016\n\006strong\030\005 \002(\005\022\r\n\005speed\030\006 \002(\005\022\020\n\010inti"
    "macy\030\007 \002(\005\022\n\n\002id\030\010 \002(\005", 862);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dogattr.proto", &protobuf_RegisterTypes);
  DogLevelConfig::default_instance_ = new DogLevelConfig();
  DogLevelConfigArray::default_instance_ = new DogLevelConfigArray();
  FoodConfig::default_instance_ = new FoodConfig();
  FoodConfigArray::default_instance_ = new FoodConfigArray();
  TrainConfig::default_instance_ = new TrainConfig();
  TrainConfigArray::default_instance_ = new TrainConfigArray();
  PlayConfig::default_instance_ = new PlayConfig();
  PlayConfigArray::default_instance_ = new PlayConfigArray();
  DogAttr::default_instance_ = new DogAttr();
  DogLevelConfig::default_instance_->InitAsDefaultInstance();
  DogLevelConfigArray::default_instance_->InitAsDefaultInstance();
  FoodConfig::default_instance_->InitAsDefaultInstance();
  FoodConfigArray::default_instance_->InitAsDefaultInstance();
  TrainConfig::default_instance_->InitAsDefaultInstance();
  TrainConfigArray::default_instance_->InitAsDefaultInstance();
  PlayConfig::default_instance_->InitAsDefaultInstance();
  PlayConfigArray::default_instance_->InitAsDefaultInstance();
  DogAttr::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dogattr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dogattr_2eproto {
  StaticDescriptorInitializer_dogattr_2eproto() {
    protobuf_AddDesc_dogattr_2eproto();
  }
} static_descriptor_initializer_dogattr_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DogLevelConfig::kLvFieldNumber;
const int DogLevelConfig::kExpFieldNumber;
#endif  // !_MSC_VER

DogLevelConfig::DogLevelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DogLevelConfig::InitAsDefaultInstance() {
}

DogLevelConfig::DogLevelConfig(const DogLevelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DogLevelConfig::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DogLevelConfig::~DogLevelConfig() {
  SharedDtor();
}

void DogLevelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DogLevelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DogLevelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DogLevelConfig_descriptor_;
}

const DogLevelConfig& DogLevelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

DogLevelConfig* DogLevelConfig::default_instance_ = NULL;

DogLevelConfig* DogLevelConfig::New() const {
  return new DogLevelConfig;
}

void DogLevelConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DogLevelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DogLevelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DogLevelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DogLevelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DogLevelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DogLevelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DogLevelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DogLevelConfig::MergeFrom(const DogLevelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DogLevelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DogLevelConfig::CopyFrom(const DogLevelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DogLevelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DogLevelConfig::Swap(DogLevelConfig* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DogLevelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DogLevelConfig_descriptor_;
  metadata.reflection = DogLevelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DogLevelConfigArray::kCfgFieldNumber;
#endif  // !_MSC_VER

DogLevelConfigArray::DogLevelConfigArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DogLevelConfigArray::InitAsDefaultInstance() {
}

DogLevelConfigArray::DogLevelConfigArray(const DogLevelConfigArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DogLevelConfigArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DogLevelConfigArray::~DogLevelConfigArray() {
  SharedDtor();
}

void DogLevelConfigArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DogLevelConfigArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DogLevelConfigArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DogLevelConfigArray_descriptor_;
}

const DogLevelConfigArray& DogLevelConfigArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

DogLevelConfigArray* DogLevelConfigArray::default_instance_ = NULL;

DogLevelConfigArray* DogLevelConfigArray::New() const {
  return new DogLevelConfigArray;
}

void DogLevelConfigArray::Clear() {
  cfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DogLevelConfigArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dogrun2.DogLevelConfig cfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DogLevelConfigArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dogrun2.DogLevelConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DogLevelConfigArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dogrun2.DogLevelConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DogLevelConfigArray::ByteSize() const {
  int total_size = 0;

  // repeated .dogrun2.DogLevelConfig cfg = 1;
  total_size += 1 * this->cfg_size();
  for (int i = 0; i < this->cfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DogLevelConfigArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DogLevelConfigArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DogLevelConfigArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DogLevelConfigArray::MergeFrom(const DogLevelConfigArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfg_.MergeFrom(from.cfg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DogLevelConfigArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DogLevelConfigArray::CopyFrom(const DogLevelConfigArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DogLevelConfigArray::IsInitialized() const {

  for (int i = 0; i < cfg_size(); i++) {
    if (!this->cfg(i).IsInitialized()) return false;
  }
  return true;
}

void DogLevelConfigArray::Swap(DogLevelConfigArray* other) {
  if (other != this) {
    cfg_.Swap(&other->cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DogLevelConfigArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DogLevelConfigArray_descriptor_;
  metadata.reflection = DogLevelConfigArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodConfig::kTypeFieldNumber;
const int FoodConfig::kCdFieldNumber;
const int FoodConfig::kConsumeHeartFieldNumber;
const int FoodConfig::kConsumeGoldFieldNumber;
const int FoodConfig::kStrongFieldNumber;
const int FoodConfig::kSpeedFieldNumber;
const int FoodConfig::kExpFieldNumber;
const int FoodConfig::kIntimacyFieldNumber;
#endif  // !_MSC_VER

FoodConfig::FoodConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoodConfig::InitAsDefaultInstance() {
}

FoodConfig::FoodConfig(const FoodConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoodConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cd_ = 0;
  consume_heart_ = 0;
  consume_gold_ = 0;
  strong_ = 0;
  speed_ = 0;
  exp_ = 0;
  intimacy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodConfig::~FoodConfig() {
  SharedDtor();
}

void FoodConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodConfig_descriptor_;
}

const FoodConfig& FoodConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

FoodConfig* FoodConfig::default_instance_ = NULL;

FoodConfig* FoodConfig::New() const {
  return new FoodConfig;
}

void FoodConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cd_ = 0;
    consume_heart_ = 0;
    consume_gold_ = 0;
    strong_ = 0;
    speed_ = 0;
    exp_ = 0;
    intimacy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_heart;
        break;
      }

      // required int32 consume_heart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_heart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_heart_)));
          set_has_consume_heart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume_gold;
        break;
      }

      // required int32 consume_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_gold_)));
          set_has_consume_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strong;
        break;
      }

      // optional int32 strong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intimacy;
        break;
      }

      // optional int32 intimacy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoodConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consume_heart(), output);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume_gold(), output);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strong(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->intimacy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoodConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consume_heart(), target);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consume_gold(), target);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strong(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->intimacy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoodConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 consume_heart = 3;
    if (has_consume_heart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_heart());
    }

    // required int32 consume_gold = 4;
    if (has_consume_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_gold());
    }

    // optional int32 strong = 5;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 intimacy = 8;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodConfig::MergeFrom(const FoodConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_consume_heart()) {
      set_consume_heart(from.consume_heart());
    }
    if (from.has_consume_gold()) {
      set_consume_gold(from.consume_gold());
    }
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodConfig::CopyFrom(const FoodConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FoodConfig::Swap(FoodConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(consume_heart_, other->consume_heart_);
    std::swap(consume_gold_, other->consume_gold_);
    std::swap(strong_, other->strong_);
    std::swap(speed_, other->speed_);
    std::swap(exp_, other->exp_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodConfig_descriptor_;
  metadata.reflection = FoodConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FoodConfigArray::kCfgFieldNumber;
#endif  // !_MSC_VER

FoodConfigArray::FoodConfigArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FoodConfigArray::InitAsDefaultInstance() {
}

FoodConfigArray::FoodConfigArray(const FoodConfigArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FoodConfigArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FoodConfigArray::~FoodConfigArray() {
  SharedDtor();
}

void FoodConfigArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FoodConfigArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FoodConfigArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FoodConfigArray_descriptor_;
}

const FoodConfigArray& FoodConfigArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

FoodConfigArray* FoodConfigArray::default_instance_ = NULL;

FoodConfigArray* FoodConfigArray::New() const {
  return new FoodConfigArray;
}

void FoodConfigArray::Clear() {
  cfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FoodConfigArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dogrun2.FoodConfig cfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FoodConfigArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dogrun2.FoodConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FoodConfigArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dogrun2.FoodConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FoodConfigArray::ByteSize() const {
  int total_size = 0;

  // repeated .dogrun2.FoodConfig cfg = 1;
  total_size += 1 * this->cfg_size();
  for (int i = 0; i < this->cfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FoodConfigArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FoodConfigArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FoodConfigArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FoodConfigArray::MergeFrom(const FoodConfigArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfg_.MergeFrom(from.cfg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FoodConfigArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FoodConfigArray::CopyFrom(const FoodConfigArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FoodConfigArray::IsInitialized() const {

  for (int i = 0; i < cfg_size(); i++) {
    if (!this->cfg(i).IsInitialized()) return false;
  }
  return true;
}

void FoodConfigArray::Swap(FoodConfigArray* other) {
  if (other != this) {
    cfg_.Swap(&other->cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FoodConfigArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FoodConfigArray_descriptor_;
  metadata.reflection = FoodConfigArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainConfig::kTypeFieldNumber;
const int TrainConfig::kCdFieldNumber;
const int TrainConfig::kConsumeHeartFieldNumber;
const int TrainConfig::kConsumeGoldFieldNumber;
const int TrainConfig::kStrongFieldNumber;
const int TrainConfig::kSpeedFieldNumber;
const int TrainConfig::kExpFieldNumber;
const int TrainConfig::kIntimacyFieldNumber;
#endif  // !_MSC_VER

TrainConfig::TrainConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainConfig::InitAsDefaultInstance() {
}

TrainConfig::TrainConfig(const TrainConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cd_ = 0;
  consume_heart_ = 0;
  consume_gold_ = 0;
  strong_ = 0;
  speed_ = 0;
  exp_ = 0;
  intimacy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainConfig::~TrainConfig() {
  SharedDtor();
}

void TrainConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrainConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainConfig_descriptor_;
}

const TrainConfig& TrainConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

TrainConfig* TrainConfig::default_instance_ = NULL;

TrainConfig* TrainConfig::New() const {
  return new TrainConfig;
}

void TrainConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cd_ = 0;
    consume_heart_ = 0;
    consume_gold_ = 0;
    strong_ = 0;
    speed_ = 0;
    exp_ = 0;
    intimacy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_heart;
        break;
      }

      // required int32 consume_heart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_heart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_heart_)));
          set_has_consume_heart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume_gold;
        break;
      }

      // required int32 consume_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_gold_)));
          set_has_consume_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strong;
        break;
      }

      // optional int32 strong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intimacy;
        break;
      }

      // optional int32 intimacy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consume_heart(), output);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume_gold(), output);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strong(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->intimacy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consume_heart(), target);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consume_gold(), target);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strong(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->intimacy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 consume_heart = 3;
    if (has_consume_heart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_heart());
    }

    // required int32 consume_gold = 4;
    if (has_consume_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_gold());
    }

    // optional int32 strong = 5;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 intimacy = 8;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainConfig::MergeFrom(const TrainConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_consume_heart()) {
      set_consume_heart(from.consume_heart());
    }
    if (from.has_consume_gold()) {
      set_consume_gold(from.consume_gold());
    }
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfig::CopyFrom(const TrainConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TrainConfig::Swap(TrainConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(consume_heart_, other->consume_heart_);
    std::swap(consume_gold_, other->consume_gold_);
    std::swap(strong_, other->strong_);
    std::swap(speed_, other->speed_);
    std::swap(exp_, other->exp_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainConfig_descriptor_;
  metadata.reflection = TrainConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrainConfigArray::kCfgFieldNumber;
#endif  // !_MSC_VER

TrainConfigArray::TrainConfigArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrainConfigArray::InitAsDefaultInstance() {
}

TrainConfigArray::TrainConfigArray(const TrainConfigArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrainConfigArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrainConfigArray::~TrainConfigArray() {
  SharedDtor();
}

void TrainConfigArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrainConfigArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrainConfigArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrainConfigArray_descriptor_;
}

const TrainConfigArray& TrainConfigArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

TrainConfigArray* TrainConfigArray::default_instance_ = NULL;

TrainConfigArray* TrainConfigArray::New() const {
  return new TrainConfigArray;
}

void TrainConfigArray::Clear() {
  cfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrainConfigArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dogrun2.TrainConfig cfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrainConfigArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dogrun2.TrainConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrainConfigArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dogrun2.TrainConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrainConfigArray::ByteSize() const {
  int total_size = 0;

  // repeated .dogrun2.TrainConfig cfg = 1;
  total_size += 1 * this->cfg_size();
  for (int i = 0; i < this->cfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrainConfigArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrainConfigArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrainConfigArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrainConfigArray::MergeFrom(const TrainConfigArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfg_.MergeFrom(from.cfg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrainConfigArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainConfigArray::CopyFrom(const TrainConfigArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainConfigArray::IsInitialized() const {

  for (int i = 0; i < cfg_size(); i++) {
    if (!this->cfg(i).IsInitialized()) return false;
  }
  return true;
}

void TrainConfigArray::Swap(TrainConfigArray* other) {
  if (other != this) {
    cfg_.Swap(&other->cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrainConfigArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrainConfigArray_descriptor_;
  metadata.reflection = TrainConfigArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayConfig::kTypeFieldNumber;
const int PlayConfig::kCdFieldNumber;
const int PlayConfig::kConsumeHeartFieldNumber;
const int PlayConfig::kConsumeGoldFieldNumber;
const int PlayConfig::kStrongFieldNumber;
const int PlayConfig::kSpeedFieldNumber;
const int PlayConfig::kExpFieldNumber;
const int PlayConfig::kIntimacyFieldNumber;
#endif  // !_MSC_VER

PlayConfig::PlayConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayConfig::InitAsDefaultInstance() {
}

PlayConfig::PlayConfig(const PlayConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayConfig::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cd_ = 0;
  consume_heart_ = 0;
  consume_gold_ = 0;
  strong_ = 0;
  speed_ = 0;
  exp_ = 0;
  intimacy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayConfig::~PlayConfig() {
  SharedDtor();
}

void PlayConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayConfig_descriptor_;
}

const PlayConfig& PlayConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

PlayConfig* PlayConfig::default_instance_ = NULL;

PlayConfig* PlayConfig::New() const {
  return new PlayConfig;
}

void PlayConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cd_ = 0;
    consume_heart_ = 0;
    consume_gold_ = 0;
    strong_ = 0;
    speed_ = 0;
    exp_ = 0;
    intimacy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // required int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_heart;
        break;
      }

      // required int32 consume_heart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_heart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_heart_)));
          set_has_consume_heart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume_gold;
        break;
      }

      // required int32 consume_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &consume_gold_)));
          set_has_consume_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strong;
        break;
      }

      // optional int32 strong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // optional int32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_intimacy;
        break;
      }

      // optional int32 intimacy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->consume_heart(), output);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->consume_gold(), output);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strong(), output);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->intimacy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // required int32 consume_heart = 3;
  if (has_consume_heart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->consume_heart(), target);
  }

  // required int32 consume_gold = 4;
  if (has_consume_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->consume_gold(), target);
  }

  // optional int32 strong = 5;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strong(), target);
  }

  // optional int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // optional int32 intimacy = 8;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->intimacy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // required int32 consume_heart = 3;
    if (has_consume_heart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_heart());
    }

    // required int32 consume_gold = 4;
    if (has_consume_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->consume_gold());
    }

    // optional int32 strong = 5;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // optional int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 intimacy = 8;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayConfig::MergeFrom(const PlayConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_consume_heart()) {
      set_consume_heart(from.consume_heart());
    }
    if (from.has_consume_gold()) {
      set_consume_gold(from.consume_gold());
    }
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayConfig::CopyFrom(const PlayConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PlayConfig::Swap(PlayConfig* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(consume_heart_, other->consume_heart_);
    std::swap(consume_gold_, other->consume_gold_);
    std::swap(strong_, other->strong_);
    std::swap(speed_, other->speed_);
    std::swap(exp_, other->exp_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayConfig_descriptor_;
  metadata.reflection = PlayConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayConfigArray::kCfgFieldNumber;
#endif  // !_MSC_VER

PlayConfigArray::PlayConfigArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayConfigArray::InitAsDefaultInstance() {
}

PlayConfigArray::PlayConfigArray(const PlayConfigArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayConfigArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayConfigArray::~PlayConfigArray() {
  SharedDtor();
}

void PlayConfigArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayConfigArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayConfigArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayConfigArray_descriptor_;
}

const PlayConfigArray& PlayConfigArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

PlayConfigArray* PlayConfigArray::default_instance_ = NULL;

PlayConfigArray* PlayConfigArray::New() const {
  return new PlayConfigArray;
}

void PlayConfigArray::Clear() {
  cfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayConfigArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dogrun2.PlayConfig cfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayConfigArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dogrun2.PlayConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayConfigArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dogrun2.PlayConfig cfg = 1;
  for (int i = 0; i < this->cfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayConfigArray::ByteSize() const {
  int total_size = 0;

  // repeated .dogrun2.PlayConfig cfg = 1;
  total_size += 1 * this->cfg_size();
  for (int i = 0; i < this->cfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayConfigArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayConfigArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayConfigArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayConfigArray::MergeFrom(const PlayConfigArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfg_.MergeFrom(from.cfg_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayConfigArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayConfigArray::CopyFrom(const PlayConfigArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayConfigArray::IsInitialized() const {

  for (int i = 0; i < cfg_size(); i++) {
    if (!this->cfg(i).IsInitialized()) return false;
  }
  return true;
}

void PlayConfigArray::Swap(PlayConfigArray* other) {
  if (other != this) {
    cfg_.Swap(&other->cfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayConfigArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayConfigArray_descriptor_;
  metadata.reflection = PlayConfigArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DogAttr::kNameFieldNumber;
const int DogAttr::kLvFieldNumber;
const int DogAttr::kExpFieldNumber;
const int DogAttr::kStarFieldNumber;
const int DogAttr::kStrongFieldNumber;
const int DogAttr::kSpeedFieldNumber;
const int DogAttr::kIntimacyFieldNumber;
const int DogAttr::kIdFieldNumber;
#endif  // !_MSC_VER

DogAttr::DogAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DogAttr::InitAsDefaultInstance() {
}

DogAttr::DogAttr(const DogAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DogAttr::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 1;
  exp_ = 0;
  star_ = 0;
  strong_ = 0;
  speed_ = 0;
  intimacy_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DogAttr::~DogAttr() {
  SharedDtor();
}

void DogAttr::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DogAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DogAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DogAttr_descriptor_;
}

const DogAttr& DogAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dogattr_2eproto();
  return *default_instance_;
}

DogAttr* DogAttr::default_instance_ = NULL;

DogAttr* DogAttr::New() const {
  return new DogAttr;
}

void DogAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 1;
    exp_ = 0;
    star_ = 0;
    strong_ = 0;
    speed_ = 0;
    intimacy_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DogAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // required int32 lv = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_star;
        break;
      }

      // required int32 star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_strong;
        break;
      }

      // required int32 strong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_)));
          set_has_strong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_speed;
        break;
      }

      // required int32 speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_intimacy;
        break;
      }

      // required int32 intimacy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_id;
        break;
      }

      // required int32 id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DogAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 lv = 2 [default = 1];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // required int32 star = 4;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->star(), output);
  }

  // required int32 strong = 5;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->strong(), output);
  }

  // required int32 speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->speed(), output);
  }

  // required int32 intimacy = 7;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->intimacy(), output);
  }

  // required int32 id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DogAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 lv = 2 [default = 1];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // required int32 star = 4;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->star(), target);
  }

  // required int32 strong = 5;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->strong(), target);
  }

  // required int32 speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->speed(), target);
  }

  // required int32 intimacy = 7;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->intimacy(), target);
  }

  // required int32 id = 8;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DogAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 lv = 2 [default = 1];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // required int32 star = 4;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // required int32 strong = 5;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong());
    }

    // required int32 speed = 6;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // required int32 intimacy = 7;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }

    // required int32 id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DogAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DogAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DogAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DogAttr::MergeFrom(const DogAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_strong()) {
      set_strong(from.strong());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DogAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DogAttr::CopyFrom(const DogAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DogAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void DogAttr::Swap(DogAttr* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(strong_, other->strong_);
    std::swap(speed_, other->speed_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DogAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DogAttr_descriptor_;
  metadata.reflection = DogAttr_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dogrun2

// @@protoc_insertion_point(global_scope)
