// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uiconfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uiconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dogrun2 {

namespace {

const ::google::protobuf::Descriptor* UIElementFont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIElementFont_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIElementIcon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIElementIcon_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIItemConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIItemConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIItemConfArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIItemConfArray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* kItemType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_uiconfig_2eproto() {
  protobuf_AddDesc_uiconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uiconfig.proto");
  GOOGLE_CHECK(file != NULL);
  UIElementFont_descriptor_ = file->message_type(0);
  static const int UIElementFont_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, font_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, font_color_),
  };
  UIElementFont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIElementFont_descriptor_,
      UIElementFont::default_instance_,
      UIElementFont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementFont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIElementFont));
  UIElementIcon_descriptor_ = file->message_type(1);
  static const int UIElementIcon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, scale_),
  };
  UIElementIcon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIElementIcon_descriptor_,
      UIElementIcon::default_instance_,
      UIElementIcon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIElementIcon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIElementIcon));
  UIItemConf_descriptor_ = file->message_type(2);
  static const int UIItemConf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, icon_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, strong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, intimacy_),
  };
  UIItemConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIItemConf_descriptor_,
      UIItemConf::default_instance_,
      UIItemConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIItemConf));
  UIItemConfArray_descriptor_ = file->message_type(3);
  static const int UIItemConfArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConfArray, conf_),
  };
  UIItemConfArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIItemConfArray_descriptor_,
      UIItemConfArray::default_instance_,
      UIItemConfArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConfArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIItemConfArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIItemConfArray));
  kItemType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uiconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIElementFont_descriptor_, &UIElementFont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIElementIcon_descriptor_, &UIElementIcon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIItemConf_descriptor_, &UIItemConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIItemConfArray_descriptor_, &UIItemConfArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uiconfig_2eproto() {
  delete UIElementFont::default_instance_;
  delete UIElementFont_reflection_;
  delete UIElementIcon::default_instance_;
  delete UIElementIcon_reflection_;
  delete UIItemConf::default_instance_;
  delete UIItemConf_reflection_;
  delete UIItemConfArray::default_instance_;
  delete UIItemConfArray_reflection_;
}

void protobuf_AddDesc_uiconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016uiconfig.proto\022\007dogrun2\"p\n\rUIElementFo"
    "nt\022\014\n\004desc\030\001 \002(\t\022\014\n\004font\030\002 \002(\t\022\r\n\005pos_x\030"
    "\003 \002(\005\022\r\n\005pos_y\030\004 \002(\005\022\021\n\tfont_size\030\005 \002(\005\022"
    "\022\n\nfont_color\030\006 \003(\005\"J\n\rUIElementIcon\022\014\n\004"
    "icon\030\001 \002(\t\022\r\n\005pos_x\030\002 \002(\005\022\r\n\005pos_y\030\003 \002(\005"
    "\022\r\n\005scale\030\004 \002(\005\"\241\002\n\nUIItemConf\022%\n\005title\030"
    "\001 \002(\0132\026.dogrun2.UIElementFont\022$\n\004icon\030\002 "
    "\002(\0132\026.dogrun2.UIElementIcon\022(\n\010icon_num\030"
    "\003 \002(\0132\026.dogrun2.UIElementFont\022%\n\005speed\030\004"
    " \001(\0132\026.dogrun2.UIElementFont\022#\n\003exp\030\005 \001("
    "\0132\026.dogrun2.UIElementFont\022&\n\006strong\030\006 \001("
    "\0132\026.dogrun2.UIElementFont\022(\n\010intimacy\030\007 "
    "\001(\0132\026.dogrun2.UIElementFont\"4\n\017UIItemCon"
    "fArray\022!\n\004conf\030\001 \003(\0132\023.dogrun2.UIItemCon"
    "f*9\n\tkItemType\022\r\n\tkItemFeed\020\000\022\016\n\nkItemTr"
    "ain\020\001\022\r\n\tkItemPlay\020\002", 620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uiconfig.proto", &protobuf_RegisterTypes);
  UIElementFont::default_instance_ = new UIElementFont();
  UIElementIcon::default_instance_ = new UIElementIcon();
  UIItemConf::default_instance_ = new UIItemConf();
  UIItemConfArray::default_instance_ = new UIItemConfArray();
  UIElementFont::default_instance_->InitAsDefaultInstance();
  UIElementIcon::default_instance_->InitAsDefaultInstance();
  UIItemConf::default_instance_->InitAsDefaultInstance();
  UIItemConfArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uiconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uiconfig_2eproto {
  StaticDescriptorInitializer_uiconfig_2eproto() {
    protobuf_AddDesc_uiconfig_2eproto();
  }
} static_descriptor_initializer_uiconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* kItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kItemType_descriptor_;
}
bool kItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UIElementFont::kDescFieldNumber;
const int UIElementFont::kFontFieldNumber;
const int UIElementFont::kPosXFieldNumber;
const int UIElementFont::kPosYFieldNumber;
const int UIElementFont::kFontSizeFieldNumber;
const int UIElementFont::kFontColorFieldNumber;
#endif  // !_MSC_VER

UIElementFont::UIElementFont()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIElementFont::InitAsDefaultInstance() {
}

UIElementFont::UIElementFont(const UIElementFont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIElementFont::SharedCtor() {
  _cached_size_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  font_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_x_ = 0;
  pos_y_ = 0;
  font_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIElementFont::~UIElementFont() {
  SharedDtor();
}

void UIElementFont::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (font_ != &::google::protobuf::internal::kEmptyString) {
    delete font_;
  }
  if (this != default_instance_) {
  }
}

void UIElementFont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIElementFont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIElementFont_descriptor_;
}

const UIElementFont& UIElementFont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiconfig_2eproto();
  return *default_instance_;
}

UIElementFont* UIElementFont::default_instance_ = NULL;

UIElementFont* UIElementFont::New() const {
  return new UIElementFont;
}

void UIElementFont::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_font()) {
      if (font_ != &::google::protobuf::internal::kEmptyString) {
        font_->clear();
      }
    }
    pos_x_ = 0;
    pos_y_ = 0;
    font_size_ = 0;
  }
  font_color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIElementFont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string desc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_font;
        break;
      }

      // required string font = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_font:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_font()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->font().data(), this->font().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_x;
        break;
      }

      // required int32 pos_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos_y;
        break;
      }

      // required int32 pos_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_font_size;
        break;
      }

      // required int32 font_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &font_size_)));
          set_has_font_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_font_color;
        break;
      }

      // repeated int32 font_color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_font_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_font_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_font_color;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIElementFont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->desc(), output);
  }

  // required string font = 2;
  if (has_font()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font().data(), this->font().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->font(), output);
  }

  // required int32 pos_x = 3;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_x(), output);
  }

  // required int32 pos_y = 4;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos_y(), output);
  }

  // required int32 font_size = 5;
  if (has_font_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->font_size(), output);
  }

  // repeated int32 font_color = 6;
  for (int i = 0; i < this->font_color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->font_color(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIElementFont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string desc = 1;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc(), target);
  }

  // required string font = 2;
  if (has_font()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->font().data(), this->font().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->font(), target);
  }

  // required int32 pos_x = 3;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_x(), target);
  }

  // required int32 pos_y = 4;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos_y(), target);
  }

  // required int32 font_size = 5;
  if (has_font_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->font_size(), target);
  }

  // repeated int32 font_color = 6;
  for (int i = 0; i < this->font_color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->font_color(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIElementFont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string desc = 1;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string font = 2;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->font());
    }

    // required int32 pos_x = 3;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // required int32 pos_y = 4;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // required int32 font_size = 5;
    if (has_font_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->font_size());
    }

  }
  // repeated int32 font_color = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->font_color_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->font_color(i));
    }
    total_size += 1 * this->font_color_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIElementFont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIElementFont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIElementFont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIElementFont::MergeFrom(const UIElementFont& from) {
  GOOGLE_CHECK_NE(&from, this);
  font_color_.MergeFrom(from.font_color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_font()) {
      set_font(from.font());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_font_size()) {
      set_font_size(from.font_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIElementFont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIElementFont::CopyFrom(const UIElementFont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIElementFont::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UIElementFont::Swap(UIElementFont* other) {
  if (other != this) {
    std::swap(desc_, other->desc_);
    std::swap(font_, other->font_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(font_size_, other->font_size_);
    font_color_.Swap(&other->font_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIElementFont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIElementFont_descriptor_;
  metadata.reflection = UIElementFont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIElementIcon::kIconFieldNumber;
const int UIElementIcon::kPosXFieldNumber;
const int UIElementIcon::kPosYFieldNumber;
const int UIElementIcon::kScaleFieldNumber;
#endif  // !_MSC_VER

UIElementIcon::UIElementIcon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIElementIcon::InitAsDefaultInstance() {
}

UIElementIcon::UIElementIcon(const UIElementIcon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIElementIcon::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_x_ = 0;
  pos_y_ = 0;
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIElementIcon::~UIElementIcon() {
  SharedDtor();
}

void UIElementIcon::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void UIElementIcon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIElementIcon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIElementIcon_descriptor_;
}

const UIElementIcon& UIElementIcon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiconfig_2eproto();
  return *default_instance_;
}

UIElementIcon* UIElementIcon::default_instance_ = NULL;

UIElementIcon* UIElementIcon::New() const {
  return new UIElementIcon;
}

void UIElementIcon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    pos_x_ = 0;
    pos_y_ = 0;
    scale_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIElementIcon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos_x;
        break;
      }

      // required int32 pos_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos_y;
        break;
      }

      // required int32 pos_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scale;
        break;
      }

      // required int32 scale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIElementIcon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  // required int32 pos_x = 2;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_x(), output);
  }

  // required int32 pos_y = 3;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos_y(), output);
  }

  // required int32 scale = 4;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIElementIcon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  // required int32 pos_x = 2;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_x(), target);
  }

  // required int32 pos_y = 3;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos_y(), target);
  }

  // required int32 scale = 4;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIElementIcon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required int32 pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_x());
    }

    // required int32 pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_y());
    }

    // required int32 scale = 4;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIElementIcon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIElementIcon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIElementIcon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIElementIcon::MergeFrom(const UIElementIcon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIElementIcon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIElementIcon::CopyFrom(const UIElementIcon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIElementIcon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UIElementIcon::Swap(UIElementIcon* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(pos_x_, other->pos_x_);
    std::swap(pos_y_, other->pos_y_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIElementIcon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIElementIcon_descriptor_;
  metadata.reflection = UIElementIcon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIItemConf::kTitleFieldNumber;
const int UIItemConf::kIconFieldNumber;
const int UIItemConf::kIconNumFieldNumber;
const int UIItemConf::kSpeedFieldNumber;
const int UIItemConf::kExpFieldNumber;
const int UIItemConf::kStrongFieldNumber;
const int UIItemConf::kIntimacyFieldNumber;
#endif  // !_MSC_VER

UIItemConf::UIItemConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIItemConf::InitAsDefaultInstance() {
  title_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
  icon_ = const_cast< ::dogrun2::UIElementIcon*>(&::dogrun2::UIElementIcon::default_instance());
  icon_num_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
  speed_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
  exp_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
  strong_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
  intimacy_ = const_cast< ::dogrun2::UIElementFont*>(&::dogrun2::UIElementFont::default_instance());
}

UIItemConf::UIItemConf(const UIItemConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIItemConf::SharedCtor() {
  _cached_size_ = 0;
  title_ = NULL;
  icon_ = NULL;
  icon_num_ = NULL;
  speed_ = NULL;
  exp_ = NULL;
  strong_ = NULL;
  intimacy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIItemConf::~UIItemConf() {
  SharedDtor();
}

void UIItemConf::SharedDtor() {
  if (this != default_instance_) {
    delete title_;
    delete icon_;
    delete icon_num_;
    delete speed_;
    delete exp_;
    delete strong_;
    delete intimacy_;
  }
}

void UIItemConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIItemConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIItemConf_descriptor_;
}

const UIItemConf& UIItemConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiconfig_2eproto();
  return *default_instance_;
}

UIItemConf* UIItemConf::default_instance_ = NULL;

UIItemConf* UIItemConf::New() const {
  return new UIItemConf;
}

void UIItemConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != NULL) title_->::dogrun2::UIElementFont::Clear();
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::dogrun2::UIElementIcon::Clear();
    }
    if (has_icon_num()) {
      if (icon_num_ != NULL) icon_num_->::dogrun2::UIElementFont::Clear();
    }
    if (has_speed()) {
      if (speed_ != NULL) speed_->::dogrun2::UIElementFont::Clear();
    }
    if (has_exp()) {
      if (exp_ != NULL) exp_->::dogrun2::UIElementFont::Clear();
    }
    if (has_strong()) {
      if (strong_ != NULL) strong_->::dogrun2::UIElementFont::Clear();
    }
    if (has_intimacy()) {
      if (intimacy_ != NULL) intimacy_->::dogrun2::UIElementFont::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIItemConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dogrun2.UIElementFont title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // required .dogrun2.UIElementIcon icon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_icon_num;
        break;
      }

      // required .dogrun2.UIElementFont icon_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon_num()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_speed;
        break;
      }

      // optional .dogrun2.UIElementFont speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exp;
        break;
      }

      // optional .dogrun2.UIElementFont exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strong;
        break;
      }

      // optional .dogrun2.UIElementFont strong = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_intimacy;
        break;
      }

      // optional .dogrun2.UIElementFont intimacy = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intimacy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intimacy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIItemConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dogrun2.UIElementFont title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->title(), output);
  }

  // required .dogrun2.UIElementIcon icon = 2;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->icon(), output);
  }

  // required .dogrun2.UIElementFont icon_num = 3;
  if (has_icon_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->icon_num(), output);
  }

  // optional .dogrun2.UIElementFont speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speed(), output);
  }

  // optional .dogrun2.UIElementFont exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->exp(), output);
  }

  // optional .dogrun2.UIElementFont strong = 6;
  if (has_strong()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->strong(), output);
  }

  // optional .dogrun2.UIElementFont intimacy = 7;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->intimacy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIItemConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dogrun2.UIElementFont title = 1;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->title(), target);
  }

  // required .dogrun2.UIElementIcon icon = 2;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->icon(), target);
  }

  // required .dogrun2.UIElementFont icon_num = 3;
  if (has_icon_num()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->icon_num(), target);
  }

  // optional .dogrun2.UIElementFont speed = 4;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->speed(), target);
  }

  // optional .dogrun2.UIElementFont exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->exp(), target);
  }

  // optional .dogrun2.UIElementFont strong = 6;
  if (has_strong()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->strong(), target);
  }

  // optional .dogrun2.UIElementFont intimacy = 7;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->intimacy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIItemConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dogrun2.UIElementFont title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // required .dogrun2.UIElementIcon icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

    // required .dogrun2.UIElementFont icon_num = 3;
    if (has_icon_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon_num());
    }

    // optional .dogrun2.UIElementFont speed = 4;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }

    // optional .dogrun2.UIElementFont exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exp());
    }

    // optional .dogrun2.UIElementFont strong = 6;
    if (has_strong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strong());
    }

    // optional .dogrun2.UIElementFont intimacy = 7;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intimacy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIItemConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIItemConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIItemConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIItemConf::MergeFrom(const UIItemConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      mutable_title()->::dogrun2::UIElementFont::MergeFrom(from.title());
    }
    if (from.has_icon()) {
      mutable_icon()->::dogrun2::UIElementIcon::MergeFrom(from.icon());
    }
    if (from.has_icon_num()) {
      mutable_icon_num()->::dogrun2::UIElementFont::MergeFrom(from.icon_num());
    }
    if (from.has_speed()) {
      mutable_speed()->::dogrun2::UIElementFont::MergeFrom(from.speed());
    }
    if (from.has_exp()) {
      mutable_exp()->::dogrun2::UIElementFont::MergeFrom(from.exp());
    }
    if (from.has_strong()) {
      mutable_strong()->::dogrun2::UIElementFont::MergeFrom(from.strong());
    }
    if (from.has_intimacy()) {
      mutable_intimacy()->::dogrun2::UIElementFont::MergeFrom(from.intimacy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIItemConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIItemConf::CopyFrom(const UIItemConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIItemConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_icon()) {
    if (!this->icon().IsInitialized()) return false;
  }
  if (has_icon_num()) {
    if (!this->icon_num().IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed().IsInitialized()) return false;
  }
  if (has_exp()) {
    if (!this->exp().IsInitialized()) return false;
  }
  if (has_strong()) {
    if (!this->strong().IsInitialized()) return false;
  }
  if (has_intimacy()) {
    if (!this->intimacy().IsInitialized()) return false;
  }
  return true;
}

void UIItemConf::Swap(UIItemConf* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(icon_, other->icon_);
    std::swap(icon_num_, other->icon_num_);
    std::swap(speed_, other->speed_);
    std::swap(exp_, other->exp_);
    std::swap(strong_, other->strong_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIItemConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIItemConf_descriptor_;
  metadata.reflection = UIItemConf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIItemConfArray::kConfFieldNumber;
#endif  // !_MSC_VER

UIItemConfArray::UIItemConfArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIItemConfArray::InitAsDefaultInstance() {
}

UIItemConfArray::UIItemConfArray(const UIItemConfArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIItemConfArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIItemConfArray::~UIItemConfArray() {
  SharedDtor();
}

void UIItemConfArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UIItemConfArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIItemConfArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIItemConfArray_descriptor_;
}

const UIItemConfArray& UIItemConfArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uiconfig_2eproto();
  return *default_instance_;
}

UIItemConfArray* UIItemConfArray::default_instance_ = NULL;

UIItemConfArray* UIItemConfArray::New() const {
  return new UIItemConfArray;
}

void UIItemConfArray::Clear() {
  conf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIItemConfArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dogrun2.UIItemConf conf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_conf;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIItemConfArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dogrun2.UIItemConf conf = 1;
  for (int i = 0; i < this->conf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->conf(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIItemConfArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dogrun2.UIItemConf conf = 1;
  for (int i = 0; i < this->conf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->conf(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIItemConfArray::ByteSize() const {
  int total_size = 0;

  // repeated .dogrun2.UIItemConf conf = 1;
  total_size += 1 * this->conf_size();
  for (int i = 0; i < this->conf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIItemConfArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIItemConfArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIItemConfArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIItemConfArray::MergeFrom(const UIItemConfArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  conf_.MergeFrom(from.conf_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIItemConfArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIItemConfArray::CopyFrom(const UIItemConfArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIItemConfArray::IsInitialized() const {

  for (int i = 0; i < conf_size(); i++) {
    if (!this->conf(i).IsInitialized()) return false;
  }
  return true;
}

void UIItemConfArray::Swap(UIItemConfArray* other) {
  if (other != this) {
    conf_.Swap(&other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIItemConfArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIItemConfArray_descriptor_;
  metadata.reflection = UIItemConfArray_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dogrun2

// @@protoc_insertion_point(global_scope)
